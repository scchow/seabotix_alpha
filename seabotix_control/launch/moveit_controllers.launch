<!-- This file was copied from uuv_control_cascaded_pid/launch/joy_velocity.launch
And edited down to only instantiate the controllers to be interfaced with MoveIt.
Also added a position controller down the cascaded PID -->
<launch>
  <arg name="model_name" />
  <arg name="uuv_name" default="$(arg model_name)"/>
  <arg name="joy_id" default="0"/>
  <arg name="reset_tam" default="false"/>

  <include file="$(find seabotix_control)/launch/thruster_manager.launch">
    <arg name="uuv_name" value="$(arg uuv_name)" />
    <arg name="model_name" value="$(arg model_name)" />
    <arg name="reset_tam" value="$(arg reset_tam)" />
  </include>

  <group ns="$(arg uuv_name)">
    <rosparam file="$(find seabotix_control)/config/inertial.yaml" command="load"/>
    <rosparam file="$(find seabotix_control)/config/vel_pid_control.yaml" command="load"/>
    <!-- TODO see if we might need  -->

    <node pkg="uuv_control_cascaded_pid" type="AccelerationControl.py" name="acceleration_control"
          output="screen">
      <param name="tf_prefix" type="string" value="$(arg uuv_name)/" />
    </node>

    <node pkg="uuv_control_cascaded_pid" type="VelocityControl.py" name="velocity_control"
        output="screen">
      <remap from="odom" to="/$(arg uuv_name)/pose_gt"/>
      <remap from="cmd_accel" to="/$(arg uuv_name)/cmd_accel"/>
    </node>
    
    <node pkg="uuv_control_cascaded_pid" type="PositionControl.py" name="position_control"
        output="screen">
      <remap from="odom" to="/$(arg uuv_name)/pose_gt"/>
      <remap from="cmd_pose" to="/$(arg uuv_name)/cmd_pose"/>
      <remap from="cmd_vel" to="/$(arg uuv_name)/cmd_vel"/>      
    </node>
  </group>

</launch>
