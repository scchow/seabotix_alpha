<launch>
  <!-- Debug flag -->
  <arg name="debug" default="0"/>

  <!-- Vehicle's initial pose -->
  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     default="-20"/>
  <arg name="roll"  default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw"   default="0.0"/>


  <!-- Mode to open different robot configurations as set the in file
  nomenclature standard for the files in /robots

  /robots/<mode>.xacro
  -->
  <!-- <arg name="mode" default="default"/> -->

  <!-- Vehicle's namespace -->
  <arg name="namespace" default="seabotix"/>
  <arg name="use_ned_frame" default="false"/>

  <!-- <arg name="world_frame" default="world"/> -->

  <group ns="$(arg namespace)">
    <group if="$(arg use_ned_frame)">
      <param name="robot_description"
        command="$(find xacro)/xacro '$(find seabotix_alpha_description)/urdf/seabotix_alpha.xacro' --inorder
          debug:=$(arg debug)
          namespace:=$(arg namespace)
          inertial_reference_frame:=world_ned" />
    </group>

    <group unless="$(arg use_ned_frame)">
      <param name="robot_description"
        command="$(find xacro)/xacro '$(find seabotix_alpha_description)/urdf/seabotix_alpha.xacro' --inorder
          debug:=$(arg debug)
          namespace:=$(arg namespace)
          inertial_reference_frame:=world" />
    </group>

    <!-- <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find seabotix_alpha_description)/robots/$(arg mode).xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />  -->
    
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
      args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>

    <!-- <group if="$(arg use_geodetic)">
      <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
            args="-urdf -latitude $(arg latitude) -longitude $(arg longitude) -depth $(arg depth) -latitude_ref $(arg latitude_ref) -longitude_ref $(arg longitude_ref) -altitude_ref $(arg altitude_ref) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
    </group>

    <group unless="$(arg use_geodetic)">
      <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
            args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
    </group> -->

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>
  </group>


  <rosparam param="$(arg namespace)/arms/n_arms">
    1
  </rosparam>

  <rosparam param="$(arg namespace)/arms/names">
    [alpha,]
  </rosparam>

  <group ns="$(arg namespace)/arms/alpha">
    <rosparam file="$(find alpha_description)/params/robot_config.yaml" command="load"/>
  </group>

  <!-- Publish state and tf for in relation to the world frame -->

  <include file="$(find uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(arg namespace)"/>
    <arg name="world_frame" value="world"/>
    <arg name="child_frame_id" value="/$(arg namespace)/base_link"/>
  </include>

</launch>
